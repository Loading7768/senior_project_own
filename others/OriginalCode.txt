from twikit import Client, TooManyRequests
import time
from datetime import datetime
from random import randint
import json
import os
import httpx

# 設定最少要擷取的推文數
MINIMUM_TWEETS = 10
# 設定查詢條件，這裡是搜尋 Elon Musk 在 2018-01-01 到 2020-01-01 之間的英文推文
# QUERY = '(from:elonmusk) lang:en until:2020-01-01 since:2018-01-01'
# 可以改為其他關鍵字來搜尋不同內容
QUERY = 'dogecoin lang:en until:2025-03-10 since:2025-03-09'

# 定義函式來獲取推文
def get_tweets(tweets):
    if tweets is None:
        # 第一次獲取推文
        print(f'{datetime.now()} - Getting tweets...')
        # 在 Latest 的欄位內搜尋 (Top, Latest, People, Media, Lists)
        tweets = client.search_tweet(QUERY, product='Latest')
    else:
        # 如果已經有推文，則等待一段隨機時間後再獲取下一批推文
        wait_time = randint(5, 10) # 5s ~ 10s
        print(f'{datetime.now()} - Getting next tweets after {wait_time} seconds ...')
        time.sleep(wait_time)
        tweets = tweets.next()

    return tweets
        


# 登入 X.com（原 Twitter）
# 1) 直接在登入後的 X 上抓出 "auth_token", "ct0"
# 2) 儲存並加載 Cookies 來保持登入狀態
client = Client(language='en-US')
client.load_cookies('cookies.json')

# 設定推文計數
founded_count = 0
tweets = None

while founded_count < MINIMUM_TWEETS:
    try:
        tweets = get_tweets(tweets)
        # print(tweets)
    except TooManyRequests as e:
        # 如果 MINIMUM_TWEETS 太大導致達到 API 限制，等待直到限制解除
        rate_limit_reset = datetime.fromtimestamp(e.rate_limit_reset)
        print(f'{datetime.now()} - Rate limit reached. Waiting until {rate_limit_reset}')
        wait_time = rate_limit_reset - datetime.now()
        time.sleep(wait_time.total_seconds())
        continue
    except httpx.ConnectTimeout:
        # 如果無法正常登入 X (發生 time out) 則等待 10 分鐘（600 秒）
        print(f'{datetime.now()} - Connection timed out. Retrying in 10 minutes...')
        time.sleep(600) 
        continue

    if not tweets:
        # 如果沒有推文了，結束爬取
        print(f'{datetime.now()} - No more tweets found')
        break

    # 確保資料夾存在
    if not os.path.exists('./data'):
        os.makedirs('./data')

    filename = './data/data.json'.strip()

    # 將 data.json 中的資料讀到 data_json 中
    try:
        with open(filename, 'r', encoding='utf-8-sig') as file:
            data_json = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        data = {"dogecoin": []}  # 如果檔案不存在，初始化為空列表

    # 測試寫入
    try:
        with open(filename, 'w', encoding='utf-8-sig') as file:
            json.dump(data_json, file, indent=4, ensure_ascii=False)
        print(f"成功寫入 {filename}")
    except OSError as e:
        print(f"寫入檔案失敗: {e}")

    # 抓出 data.json 中最後一筆資料的 tweet_count
    try:
        tweet_count = data_json['dogecoin'][-1]['tweet_count']
    except (IndexError):
        tweet_count = 0

    # 改成用 json 格式，最大的欄位是每個幣的名字，用 dictionary 包起來
    for tweet in tweets:
        tweet_count += 1
        founded_count += 1

        tweet_dict = {}
        tweet_dict['tweet_count'] = tweet_count
        tweet_dict['username'] = tweet.user.name  # 使用者名稱
        tweet_dict['text'] = tweet.text  # 推文內容
        tweet_dict['created_at'] = tweet.created_at  # 發布時間 (這裡是 GMT+0 的時間)
        tweet_dict['retweet'] = tweet.retweet_count  # 轉推數
        tweet_dict['likes'] = tweet.favorite_count  # 按讚數

        # 將新的 tweet 加入自 data_json 裡的 dogecoin 字典中
        data_json['dogecoin'].append(tweet_dict)

        # 將推文資訊寫入 data.json 檔案
        # ensure_ascii=False   直接輸出原本的字元，不會轉成 Unicode 編碼
        with open('./data/data.json', 'w', encoding='utf-8-sig') as file:
            json.dump(data_json, file, indent=4, ensure_ascii=False)

    print(f'{datetime.now()} - Got {founded_count} tweets')

# 爬取結束
print(f'{datetime.now()} - Done! Got {founded_count} tweets found')